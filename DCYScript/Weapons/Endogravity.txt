Class DCY_Endogravity : DCY_Weapon
{
  Default
  {
	Tag "Endogravity Seize Munition";
	Weapon.SelectionOrder 2800;
	Weapon.SlotNumber 8;
	+WEAPON.NOAUTOFIRE;
	+NOEXTREMEDEATH;
	Weapon.AmmoGive 50;
	Weapon.AmmoUse1 1;
	Weapon.AmmoUse2 1;
	Weapon.AmmoType1 "DCY_Antimateria";
	Weapon.AmmoType2 "DCY_Antimateria";
	Inventory.PickupSound "dcy/bigfuckinggunpickup";
	Inventory.PickupMessage "What is this. It's a Endogravity Seize Munition? ...It's a gravity gun too, so... have fun?";
  }
  
  override Inventory CreateCopy(Actor other)
  {
	let x = CA_Variables.Get();
	if (x && !x.hasAntimateriaWeapons) x.hasAntimateriaWeapons = true;
	return Super.CreateCopy(other);
  }
  
  action void DCY_EndoPull(actor victim, int destdist = -1) //Code by Jaih1r0
  {
	if(!victim) return;
			
	double safedist = destdist < 0 ? (victim.radius*2 + self.radius*2) : destdist; //get a safe dist to put the victim
	Vector3 ViewDirection = (AngleToVector(angle, cos(pitch)), -sin(pitch)); //get the player view direction
	
	double actdist = distance3d(victim); //get the current distance
	actdist -= safedist; //leave a little space to move
        
	//get the steps size
	double str = 150 / float((victim.Mass >= 10) ? ((victim.Mass + 1) / 40) : 1);
	double step = min(str*5,48);
        
	double itdist = actdist - step; //calculate the new distance (actual distance - stepsize)
	if(itdist < safedist) itdist = safedist; //the distance shouldnt be less than the safe distance
	ViewDirection *= itdist; //multiply the view direction by the desired distance
        
	vector3 playerview = (pos.xy, pos.z + (height * .5)); //get the position of the player
	vector3 newpos = levellocals.vec3offset(playerview,ViewDirection); //calculate the new position
        
	victim.bNOGRAVITY = true;
	victim.A_Face(invoker.owner);
	victim.vel = (0, 0, 0);
	victim.setorigin(newpos - (0, 0, victim.height / 2), true); //set the new position
  }
	
  action void A_EndoAltBlast()
  {
    A_QuakeEx(2, 2, 2, 10, 0, 150, "none", QF_SCALEDOWN|QF_3D);
	A_StartSound("Endogravity/Push", CHAN_WEAPON, CHANF_OVERLAP, .85);
	A_StartSound("Endogravity/Launch", CHAN_WEAPON, CHANF_OVERLAP, .75);
	A_Recoil(5);
	DCY_Muzzle(0.5, (160, 90));
	invoker.DepleteAmmo(invoker.bAltFire, true);
	A_GunFlash();
	
	FLineTraceData d;
	
	A_FireBullets(0, 0, 1, 0, "DCY_Null2", 0);
	LineTrace(angle, 8192, pitch, TRF_NOSKY, height / 2, 0, 0, d);
	let h = d.HitActor;
		
	if (d.HitType == TRACE_HitWall || d.HitType == TRACE_HitActor || d.HitType == TRACE_HitCeiling || d.HitType == TRACE_HitFloor)
	{
		/*actor puff = Actor(Spawn("DCY_EndogravityPuff"));
		
		if (!puff) return;
		puff.SetOrigin(d.HitLocation, false);
		puff.A_Face(invoker.owner);*/
		
		if (h && h.bSHOOTABLE && h.Health > 0)
		{
			h.A_Face(invoker.owner);
			h.Vel3DFromAngle(30, invoker.owner.angle, invoker.owner.pitch);
			h.vel.z += 6;
			h.DamageMobj(self, invoker.owner, min(h.GetMaxHealth() + 1, 300), "Plasma", DMG_PLAYERATTACK|DMG_NO_PROTECT|DMG_NO_PAIN);
		}
	}
	
	DCY_Beam("24ff24", 1, 2.55, 0, true, 0.2);
	DCY_Beam("189e13", frandom(.5, 1), 4, 0, true, 0.1);
	
	for (int i = 0; i < d.distance - 10; i += 10)
	{
		actor y = Actor(Spawn("DCY_EndogravityTrail", Level.Vec3Offset(d.HitLocation, d.HitDir * -i)));
		y.A_Face(invoker.owner);
	}
  }
  
  action void DCY_EndoReset()
  {
	if (invoker.lastvictim && invoker.lastvictim.Health > 0)
	{
		if (invoker.lastvictim.ResolveState("Pain")) { invoker.lastvictim.tics = 10; }
		invoker.lastvictim.bNOGRAVITY = invoker.saveflag;
		invoker.lastvictim.bTHRUACTORS = false;
	}
  }
  
  action bool DCY_CheckForPull(actor victim)
  {
	return (victim && victim.Mass < 2000 && victim.radius <= 40 && victim.height <= 95 && invoker.owner.CheckSight(victim));
  }
  
  float str;
  bool saveflag;
  actor lastvictim;
  vector3 v;
  
  States
  {
  Spawn:
	3ND_ Z -1;
	Stop;
  OverlayIdle:
	3ND_ A 1;
	Loop;
  OverlayPullIdle:
	3ND_ BCDE 2;
	Loop;
  OverlayMuzzle:
	MUZ_ DD 1 Bright
	{
		invoker.t += 0.1;
		A_OverlayRotate(-1, frandom(0, 360));
		A_OverlayScale(-1, invoker.t, invoker.t);
	}
	Stop;
  OverlayFire:
	3ND_ A 1
	{
		invoker.lower += 8;
		A_WeaponOffset(0 - (invoker.lower / 5), 32 + (invoker.lower / 2.5), WOF_INTERPOLATE);
		DCY_HandleScale(5);
	}
	3ND_ AAAAAAAAAAAAABBCCDDEEBBCCDDEEBBCCDDEEBBCCDDEE 1
	{
		if (invoker.lower > 0.01) invoker.lower *= 0.85; else invoker.lower = 0;
		A_WeaponOffset(0 - (invoker.lower / 5), 32 + (invoker.lower * 1.5), WOF_INTERPOLATE);
		DCY_HandleScale(5);
	}
	Goto OverlayIdle;
  Feel:
	TNT1 A 1
	{
		A_QuakeEx(1, 1, 1, 15, 0, 450, "none", QF_RELATIVE|QF_SCALEDOWN|QF_3D);
		A_ZoomFactor(0.9);
	}
	TNT1 A 1 A_ZoomFactor(0.925);
	TNT1 A 1 A_ZoomFactor(0.9475);
	TNT1 A 1 A_ZoomFactor(0.96);
	TNT1 A 1 A_ZoomFactor(0.9825);
	TNT1 A 1 A_ZoomFactor(0.989);
	TNT1 A 1 A_ZoomFactor(0.9926);
	TNT1 A 1 A_ZoomFactor(0.995);
	TNT1 A 1 A_ZoomFactor(0.997);
	TNT1 A 6 A_ZoomFactor(1);
	Stop;
  Select:
	TNT1 A 0
	{
		invoker.offsx = -75;
		invoker.offsy = 100;
		A_WeaponOffset(0, 32, WOF_INTERPOLATE);
		A_OverlayPivotAlign(5, PSPA_CENTER, PSPA_CENTER);
		A_OverlayRotate(5, invoker.offsx / 2.5, WOF_INTERPOLATE);
		A_StartSound("Endogravity/Up", 20);
	}
	TNT1 A 1
	{
		A_Overlay(5, "OverlayIdle");
		DCY_Raise();
		A_OverlayPivotAlign(5, PSPA_CENTER, PSPA_CENTER);
		A_OverlayRotate(5, invoker.offsx / 2.5, WOF_INTERPOLATE);
		return (invoker.offsx >= -0.1 || invoker.offsy <= 0.1) ? ResolveState("Ready") : ResolveState(null);
	}
	Goto Select+1;
  Deselect:
	TNT1 A 0
	{
		DCY_EndoReset();
		invoker.offsx = invoker.saveoffsx - 2;
		invoker.offsy = invoker.saveoffsy + 2;
		A_StopSounds(10, 11);
	}
	TNT1 A 1
	{
		A_Overlay(5, "OverlayIdle");
		DCY_Lower();
		
		return (invoker.offsx <= -75 || invoker.offsy >= 100) ? ResolveState("DeselectLoop") : ResolveState(null);
	}
	Goto Deselect+1;
  Ready:
	TNT1 A 1
	{
		invoker.lower = 0;
		A_Overlay(5, "OverlayIdle");
		A_WeaponReady();
		A_OverlayOffset(5, 0, 0, WOF_INTERPOLATE);
	}
	Loop;
  Fire:
  Denied:
	TNT1 A 0 A_StartSound("Endogravity/Error", CHAN_WEAPON);
	TNT1 AAAAAAAAAAAAAAAAA 1
	{
		FLineTraceData d;
		LineTrace(angle, 8192, pitch, TRF_NOSKY, height / 2, 0, 0, d);
		A_WeaponOffset(frandom(-1, 1), frandom(-1, 1) + 32, WOF_INTERPOLATE);
		
		let b = d.HitActor;
		
		if (d.HitType == TRACE_HitActor)
		{
			if (DCY_CheckForPull(b))
			{
				invoker.saveflag = b.bNOGRAVITY;
				b.bTHRUACTORS = true;
				invoker.lastvictim = b;
				if (b.ResolveState("Pain")) { b.A_Pain(); b.SetStateLabel("Pain"); b.tics = -1; }
				A_StartSound("Endogravity/Start", CHAN_WEAPON);
				A_StartSound("Endogravity/Add", 9, volume: 0.5);
				A_StartSound("Endogravity/Hold1", 10, CHANF_LOOPING);
				A_StartSound("Endogravity/Hold2", 11, CHANF_LOOPING);
				A_Overlay(5, "OverlayPullIdle");
				Return ResolveState("Pull");
			}
		}
		
		Return ResolveState(null);
	}
	TNT1 A 5;
	Goto Ready;
  Pull:
	TNT1 A 1
	{
		A_WeaponOffset(frandom(-1, 1), frandom(-1, 1) + 32, WOF_INTERPOLATE);
		
		FLineTraceData d;
		LineTrace(angle, 8192, pitch, TRF_NOSKY, height / 2, 0, 0, d);
		DCY_Beam("116b16", frandom(.4, 1), 3, 0);
		
		let b = d.HitActor;
		
		A_WeaponReady(WRF_NOPRIMARY|WRF_NOSWITCH);
		if (DCY_CheckForPull(invoker.lastvictim)) DCY_EndoPull(invoker.lastvictim);
		else Return ResolveState("Disassociate");
		Return ResolveState(null);
	}
	TNT1 A 0 A_Refire("Pull");
	Goto Disassociate;
  Disassociate:
	TNT1 A 0 DCY_EndoReset();
	Goto Cool;
  Cool:
	TNT1 A 0
	{
		A_StopSounds(9, 11);
		A_StartSound("Endogravity/Cancel", CHAN_WEAPON);
		A_Overlay(5, "OverlayIdle");
	}
	Goto Ready;
  AltFire:
	TNT1 A 1 A_Overlay(5, "OverlayIdle");
	TNT1 A 30
	{
		DCY_EndoReset();
		A_StopSounds(9, 11);
		A_Overlay(10, "Feel");
		A_Overlay(5, "OverlayFire");
		A_EndoAltBlast();
	}
	Goto Ready;
  }
}

Class DCY_EndogravityTrail : Actor
{
  override void PostBeginPlay()
  {
	if (!random(0, 3)) A_SpawnParticleEx(0x37ad1f, TexMan.CheckForTexture("graphics/particles/dcysquarep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE, random(5, 35), random(1, 9), 0, frandom(-1, 1), frandom(-1, 1), frandom(-1, 1), frandom(-1.5, 1.5), frandom(-1.5, 1.5), frandom(-1.5, 1.5), frandom(-0.2, 0.2), frandom(-0.2, 0.2), frandom(-0.2, 0.2), fadestepf: 0, sizestep: -0.5);	
	Destroy();
	return;
  }
}