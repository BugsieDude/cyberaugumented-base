Class DCY_PhotonCrux : DCY_Weapon
{
  Default
  {
	Tag "Photon Crux";
	Weapon.SlotNumber 7;
	Inventory.PickupMessage "The Photon Crux. Something about this looks fascinating.";
	+WEAPON.BFG;
	Height 20;
	Weapon.SelectionOrder 2800;
	Weapon.AmmoUse1 100;
	Weapon.AmmoUse2 10;
	Weapon.AmmoGive1 100;
	Weapon.AmmoGive2 100;
	Weapon.AmmoType1 "DCY_Battery";
	Weapon.AmmoType2 "DCY_Battery";
	Inventory.PickupSound "dcy/bigfuckinggunpickup";
  }
  
  int power;
  double steamsound;
  
  action void A_Crux()
  {
	if (player == null) return;
	
	A_QuakeEx(3, 3, 3, 13, 0, 1000, "", QF_SCALEDOWN|QF_3D);
	
	Weapon weap = player.ReadyWeapon;
	if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		if (!weap.DepleteAmmo(weap.bAltFire, true, deh.BFGCells)) return;
	
	SpawnPlayerMissile("DCY_CruxCore", angle, nofreeaim:sv_nobfgaim);
  }
  
  action void A_MiniCrux()
  {
	if (player == null) return;
	
	A_QuakeEx(1, 1, 1, 13, 0, 1000, "", QF_SCALEDOWN|QF_3D);
	
	Weapon weap = player.ReadyWeapon;
	if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		if (!weap.DepleteAmmo (weap.bAltFire, true, deh.BFGCells)) return;
	SpawnPlayerMissile("DCY_CruxLite", angle, nofreeaim:sv_nobfgaim);
  }
  
  action void A_CruxSmoke()
  {
	if (player == null) return;
	
	for (int i = 1; i > -2; i -= 2)
		A_SpawnParticleEx(0x34d2eb, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE, random(90, 95), 10, 0, 25, zoff: 36, velx: frandom(-0.5, 0.5), vely: frandom(-0.5, 0.5) - (i * 6), velz: frandom(-0.5, 0.5), accely: (i / 8), startalphaf: 0.35, fadestepf: 0.025, sizestep: 5);
  }
  
  States
  {
  Spawn:
	CR_X Z -1;
	Stop;
  OverlayIdle:
	CR_X A 1;
	Loop;
  OverlayFire:
	CR_X ABCD 4;
	CR_X EEEEFFFFGGHHIIGGHHI 1
	{
		A_OverlayPivotAlign(5, PSPA_CENTER, PSPA_CENTER);
		invoker.lower += 0.1;
		A_WeaponOffset(frandom(-2, 2) * (invoker.lower), 32 + (frandom(-2, 2) * (invoker.lower)), WOF_INTERPOLATE);
	}
	Goto OverlayFired;
  OverlayFired:
	CR_X JJ 1
	{
		invoker.lower += 8.65;
		A_WeaponOffset(0, 32 + (invoker.lower / 2), WOF_INTERPOLATE);
		DCY_HandleScale(5);
	}
	CR_X KKLLMMNNNNNNNNNNOOOOOOOOOOO 1
	{
		if (invoker.lower > 0.01) invoker.lower *= 0.65; else invoker.lower = 0;
		A_WeaponOffset(0, 32 + invoker.lower, WOF_INTERPOLATE);
		DCY_HandleScale(5);
	}
	Stop;
  Feel:
	TNT1 A 1 A_ZoomFactor(0.8);
	TNT1 A 1 A_ZoomFactor(0.85);
	TNT1 A 1 A_ZoomFactor(0.925);
	TNT1 A 1 A_ZoomFactor(0.95);
	TNT1 A 1 A_ZoomFactor(0.975);
	TNT1 A 1 A_ZoomFactor(0.9875);
	TNT1 A 1 A_ZoomFactor(0.99275);
	TNT1 A 1 A_ZoomFactor(0.995);
	TNT1 A 1 A_ZoomFactor(0.9975);
	TNT1 A 1 A_ZoomFactor(1);
	Stop;
  Select:
	TNT1 A 0
	{
		invoker.offsx = 100;
		invoker.offsy = 150;
		A_WeaponOffset(0, 32, WOF_INTERPOLATE);
		A_OverlayPivotAlign(5, PSPA_CENTER, PSPA_CENTER);
		A_OverlayRotate(5, invoker.offsy / 3.5, WOF_INTERPOLATE);
		A_Overlay(5, "OverlayIdle");
	}
	TNT1 A 1
	{
		DCY_Raise(0.65);
		A_Overlay(5, "OverlayIdle");
		return (invoker.offsx <= 0.1 && invoker.offsy <= 0.1) ? ResolveState("Ready") : ResolveState(null);
	}
	Goto Select+1;
  Deselect:
	TNT1 A 0
	{
		invoker.offsx = invoker.saveoffsx + 2;
		invoker.offsy = invoker.saveoffsy + 2;
		invoker.steamsound = 0;
		A_StopSound(123);
		A_Overlay(5, "OverlayIdle");
		A_StopSound(CHAN_WEAPON);
		A_StopSound(35);
	}
	TNT1 A 1
	{
		DCY_Lower(1.45, 1.05);
		A_Overlay(5, "OverlayIdle");
		return (invoker.offsx >= 100 || invoker.offsy >= 150) ? ResolveState("DeselectLoop") : ResolveState(null);
	}
	Goto Deselect+1;
  Ready:
	TNT1 A 1
	{
		A_WeaponReady();
		A_OverlayOffset(5, 0, 0, WOF_INTERPOLATE);
		A_Overlay(5, "OverlayIdle");
		
		if (invoker.steamsound > 0) invoker.steamsound -= 0.1;
		else A_StopSound(123);
		A_SoundVolume(123, invoker.steamsound);
	}
	Loop;
  Fire:
	TNT1 A 0 A_StopSound(123);
  NormalFire:
	TNT1 A 1
	{
		invoker.CheckAmmo(PrimaryFire, true, true, 100);
		if (invoker.power > 0) Return ResolveState("Cooldown");
		Return ResolveState(null);
	}
	TNT1 A 35
	{
		A_StartSound("Crux/Fire", CHAN_WEAPON, CHANF_OVERLAP, attenuation: 0.5);
		A_Overlay(5, "OverlayFire");
	}
	TNT1 A 10
	{
		invoker.power = 80;
		A_Overlay(10, "Feel");
		A_Crux();
	}
	TNT1 A 20
	{
		A_Overlay(5, "OverlayIdle");
		A_WeaponReady(WRF_NOFIRE);
	}
	Goto Ready;
  Cooldown:
	TNT1 A 1
	{
		A_StartSound("SteamCooldown", 123, CHANF_LOOPING, 1);
		A_SoundVolume(123, invoker.steamsound);
		if (invoker.steamsound < 0.75) invoker.steamsound += 0.1;
	
		A_CruxSmoke();
		A_WeaponOffset(0, cyberaugumentedeventhandler.lerp(32, 29, 0.1), WOF_INTERPOLATE);
		
		if (invoker.power <= 0) Return ResolveState("Backup");
		else invoker.power--;
		
		return ResolveState(null);
	}
	TNT1 A 0 A_Refire("Cooldown");
	Goto Ready;
  Backup:
	TNT1 AAAAAAAAAAAAAAAAAAAA 1
	{
		A_Overlay(5, "OverlayIdle");
		A_WeaponReady(WRF_NOFIRE);
		
		if (invoker.steamsound > 0) invoker.steamsound -= 0.1;
		else A_StopSound(123);
		A_SoundVolume(123, invoker.steamsound);
	}
	Goto Ready;
  AltFire:
  NormalAltFire:
	TNT1 A 1
	{
		if (invoker.power > 0) Return ResolveState("Cooldown");
		Return ResolveState(null);
	}
	Goto FireReady;
  FireReady:
	TNT1 A 10
	{
		A_Overlay(10, "Feel");
		A_Overlay(5, "OverlayFired");
		A_StartSound("DCYBallista/Explode", 100, attenuation: 0.5, pitch: 1.5);
		A_MiniCrux();
	}
	TNT1 A 1
	{
		invoker.lower = 0;
		A_Refire("FireReady");
	}
	Goto Ready;
  }
}

Class DCY_CruxCore : DCY_PProjectile
{
	Default
	{
		DamageType "BFG";
		Radius 13;
		Height 8;
		Speed 5;
		Damage 150;
		+RANDOMIZE
		+NODAMAGETHRUST
		RenderStyle "Add";
		Alpha 1.0;
		Obituary "%o saw the reality 'fall apart'.";
	}
	
	protected int t, cooldown;
	protected actor act;
	double j;
	
	void A_CruxFX(double scale = 1)
	{
		if (t < 10) { A_ScaleVelocity(1.15); t++; }
		if (scale <= 1) A_SpawnParticleEx(0x148c1c, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE, random(90, 95), 80 * scale, 0, frandom(-20, 20), velx: frandom(-0.5, 0.5), vely: frandom(-0.5, 0.5), velz: frandom(-0.5, 0.5), fadestepf: 0.0215, sizestep: 0.55);
		A_SpawnParticleEx(0x00a0a6, TexMan.CheckForTexture("graphics/Particles/dcyglowp.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, random(20, 40), random(120, 80) * scale, 0, frandom(-20, 20), startalphaf: 0.95, sizestep: -0.05, startroll: frandom(0, 360));
		A_SpawnParticleEx(0x34d2eb, TexMan.CheckForTexture("graphics/Particles/dcyglowp.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, 50, random(70, 100) * scale, startalphaf: 1, fadestepf: 0.1, sizestep: random(-1, -2), startroll: frandom(0, 360));
		A_SpawnParticleEx(0xffffff, TexMan.CheckForTexture("graphics/Particles/dcyglowp.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, 10, random(50, 70) * scale, sizestep: random(-1, -2), startroll: frandom(0, 360));
	}
	
	void A_CruxThunder()
	{
		if (!random(0, 2)) return;
		
		cooldown--;
		if (cooldown >= 0) return;
		
		actor tar = null;
		BlockThingsIterator it = BlockThingsIterator.Create(self, 600);
		
		while (it.Next())
		{
			let a = it.thing;
			if (a && a.bISMONSTER && !a.bINVULNERABLE && !a.bDORMANT && !a.bNODAMAGE && a.bSHOOTABLE && a.Health > 0 && a != act && CheckSight(a) && Distance3D(a) < 600)
				tar = a;
		}
		
		if (!tar) tar = act;
		if (tar)
		{	
			Vector3 dis = Level.Vec3Diff(self.pos, tar.pos + (0, 0, tar.height / 2));
			Vector3 uni = dis.Unit();
			double dst = dis.Length();
			dst = clamp(dst, 0, 8192);
			
			for (double i = 0; i < dst; i += 5)
				self.A_SpawnParticleEx(0x34d2eb, TexMan.CheckForTexture("graphics/Particles/dcysquarep.png"), STYLE_ADD, SPF_FULLBRIGHT, 20, random(5, 10), 0, (i * uni.X), (i * uni.Y), (i * uni.Z));
		
			tar.DamageMobj(self, self, random(10, 200), "Plasma", DMG_NO_ARMOR|DMG_PLAYERATTACK);
		}
		
		cooldown = random(10, 40);
	}
	
	void A_CruxSucc()
	{
		BlockThingsIterator it = BlockThingsIterator.Create(self, 1200);
		
		while (it.Next())
		{
			let a = it.thing;
			
			double dist = abs((1200 - Distance3D(a))) / 70;
			
			if (a && !(a is 'PlayerPawn') && a.bSHOOTABLE && !a.bNODAMAGE && a.Speed > 0 && a.Health > 0 && a.Health < 2500 && a != act && CheckSight(a) && Distance3D(a) < 1200)
			{
				if (Distance3D(a) < 20) a.vel *= 0.01;
				a.Vel3DFromAngle(dist, a.angleTo(self), a.pitchTo(self));
			}
		}
	}
	
	States
	{
	Spawn:
		TNT1 A 1
		{
			A_CruxFX();
			for (int i = random(1, 3); i > 0; i--) A_CruxThunder();
		}
		Loop;
	Death:
		TNT1 A 1
		{
			if (j > 100)
			{
				BlockThingsIterator ti = BlockThingsIterator.Create(self, 2000);
				actor a;
				
				A_StartSound("Crux/Impact", 100, attenuation: 0.1);
				
				while(ti.Next())
				{
					a = ti.thing;
					double rad = abs((2000 - Distance3D(a)) / 2);
					if (a && a.Health > 0 && a.bSHOOTABLE && !a.bINVULNERABLE && !a.bDORMANT && !a.bNODAMAGE && CheckSight(a) && distance3D(a) < 2000 && !a.bDONTTHRUST)
					{
						if (!(a is "PlayerPawn"))
						{
							a.DamageMobj(self, self, ((a.bBOSS && distance3D(a) < 1000) ? 1.65 : 1) * (2000 - distance3D(a)), "Plasma", DMG_FORCED|DMG_PLAYERATTACK|DMG_THRUSTLESS);
							a.Vel3DFromAngle((rad / 2) / (a.Mass / (a.Mass / 4)), self.AngleTo(a), self.PitchTo(a));
							if (a.GetMaxHealth() < 2500) a.vel.z += (rad / 6) / ((a.Mass > 600) ? 2.5 : 1);
							a.vel.z = clamp(a.vel.z, -35, 35);
						}
					}
				}
				
				for (int i = 0; i < 360; i += random(6, 15))
				{
					A_SpawnParticleEx(0x004f4a, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, 230, random(150, 300), i, frandom(20, -20), frandom(-20, 20), frandom(-20, 20) + 25, frandom(-10, 10), frandom(-10, 10), frandom(-10, 10), startalphaf: 0.5, fadestepf: 0.005, sizestep: 20, startroll: frandom(0, 360), rollvel: random(0, 1) ? 0.5 : -0.5);
				
					for (int j = 1; j < 14; j++)
						A_SpawnParticleEx(0x34d2eb, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, 230, random(150, 300), i, frandom(20, -20), frandom(-20, 20), frandom(-20, 20) + 25, frandom(-0.01, 0.01) + (80 / j), frandom(-0.01, 0.01), frandom(0.01, -0.01) + (frandom(-1, 1) * (20 / j)), startalphaf: 0.9, fadestepf: 0.025, sizestep: 8.5, startroll: frandom(0, 360), rollvel: random(0, 1) ? 0.5 : -0.5);
				}
				
				A_BFGSpray("DCY_CruxSpray", 60, 20);
				
				destroy();
				return;
			}
			
			j++;
			A_CruxFX(1 + (j / 30));
			A_CruxSucc();
			A_Explode(50 * (j / 100), 256 * (j / 100));
			A_SpawnParticleEx(0x00a0a6, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, random(90, 95), random(400, 600) * (j / 100), 0, frandom(-20, 20), velx: frandom(-0.5, 0.5) * (10 + (j / 7)), vely: frandom(-0.5, 0.5) * (10 + (j / 7)), velz: frandom(-0.5, 0.5) * (10 + (j / 7)), startalphaf: 0.5, fadestepf: 0.0115, sizestep: 0.55, startroll: frandom(0, 360));
		}
		Loop;
	}
}

Class DCY_CruxSpray : Actor
{
  const DCY_BALLISTA_RANGE = 256;
  
  override void PostBeginPlay()
  {
	A_SpawnParticleEx(0x34d2eb, TexMan.CheckForTexture("graphics/Particles/dcyglowp.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE, 5, random(150, 200), 0, fadestepf: 0.2, sizestep: -10);
	
	for (int i = random(10, 20); i > 0; i--)
	{
		A_SpawnParticleEx(0x34d2eb, TexMan.CheckForTexture("graphics/particles/dcysquarep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE, 80, random(1, 9), 0, frandom(-1, 1), frandom(-1, 1), frandom(-1, 1), frandom(-1.5, 1.5), frandom(-1.5, 1.5), frandom(-1.5, 1.5), frandom(-0.2, 0.2), frandom(-0.2, 0.2), frandom(-0.2, 0.2), fadestepf: 0, sizestep: -0.075);	
		A_SpawnParticleEx(0x34d2eb, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE|SPF_ROLL, 150, random(50, 70), frandom(0, 360), velx: frandom(-1.5, 1.5), vely: frandom(-1.5, 1.5), velz: frandom(-1.5, 1.5), fadestepf: 0.0275, sizestep: frandom(2.00, 5.25), startroll: frandom(0, 360));
	}
		
	Destroy();
  }
}

Class DCY_CruxLite : DCY_CruxCore
{
	Default
	{
		Damage 40;
		Speed 30;
	}
	
	States
	{
	Spawn:
		TNT1 A 1
		{
			A_CruxFX(0.65);
			if (!random(0, 2)) A_CruxThunder();
		}
		Loop;
	Death:
		TNT1 A 1
		{
			A_SpawnParticleEx(0xa8fffa, TexMan.CheckForTexture("graphics/Particles/dcyglowp.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE, 5, random(200, 250), 0, fadestepf: 0.2, sizestep: -10);
	
			for (int i = random(10, 20); i > 0; i--)  A_SpawnParticleEx(0x34d2eb, TexMan.CheckForTexture("graphics/particles/dcysquarep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE, 80, random(1, 9), 0, frandom(-1, 1), frandom(-1, 1), frandom(-1, 1), frandom(-1.5, 1.5), frandom(-1.5, 1.5), frandom(-1.5, 1.5), frandom(-0.2, 0.2), frandom(-0.2, 0.2), frandom(-0.2, 0.2), fadestepf: 0, sizestep: -0.075);	
			for (int i = random(7, 17); i > 0; i--) A_SpawnParticleEx(0x004f4a, TexMan.CheckForTexture("graphics/Particles/dcyflame.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, 150, random(30, 80), i, frandom(20, -20), frandom(-20, 20), frandom(-20, 20) + 25, frandom(-2, 2), frandom(-2, 2), frandom(-2, 2), startalphaf: 0.5, fadestepf: 0.0075, sizestep: 7, startroll: frandom(0, 360), rollvel: random(0, 1) ? 0.5 : -0.5);
			
			A_StartSound("Crux/Impact", 100, attenuation: 0.5, pitch: 1.2);
			A_BFGSpray("DCY_CruxSpray", 10, 20);
		}
		Stop;
	}
}