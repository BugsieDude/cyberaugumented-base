Class DCY_Oxidation : DCY_Weapon
{
  Default
  {
	Tag "'Oxidation' - Oxidified Plasma Generator";
	Weapon.AmmoGive 100;
	Weapon.AmmoUse 1;
	Weapon.SelectionOrder 100;
	Weapon.SlotNumber 8;
	Weapon.AmmoType "DCY_Battery";
	Obituary "%o is now oxidified by %k.";
	Inventory.PickupSound "dcy/plasmariflepickup";
	Inventory.PickupMessage "Caught the 'Oxidation' - Oxidified Plasma Generator! ...It's just a plasmatic flare gun, but what else can be added? It's the fourth state of matter--plasma.";
  }
  
  int overheat;
  name interfacecol;
  color interfacecol2;
  
  const OXI_TRAIL = 25;
  
  protected int trail;
  double wsavex, wsavey, wsavea;
  
  action void A_OxidationFlame()
  {
	if (waterlevel > 2) { A_ClearOverlays(170, 195); return; }
	if (invoker.trail >= OXI_TRAIL) invoker.trail = 0;
	int layer = invoker.trail + 170;
	A_Overlay(layer, "OverlayTrail");
	
	let p = player.FindPSprite(PSP_WEAPON);
	let bob = player.mo.BobWeapon(System.GetTimeFrac());
	
	A_OverlayPivotAlign(layer, PSPA_CENTER, PSPA_CENTER);
	A_OverlayFlags(layer, PSPF_FORCEALPHA|PSPF_ALPHA|PSPF_RENDERSTYLE, true);
	A_OverlayFlags(layer, PSPF_ADDBOB|PSPF_ADDWEAPON, false);
	A_OverlayRenderStyle(layer, STYLE_ADD);
	A_OverlayAlpha(layer, frandom(0.5, 0.85));
	A_OverlayScale(layer, frandom(0.25, 0.3));
	A_OverlayRotate(layer, frandom(0, 360));
	A_OverlayTranslation(layer, invoker.interfacecol);
	DCY_OxiCheck(layer);
	
	invoker.wsavex = p.x + bob.x;
	invoker.wsavey = p.y + bob.y;
	
	A_OverlayOffset(layer, invoker.wsavex + 180, invoker.wsavey + 120);
	
	invoker.trail++;
  }
  
  action void A_OxiFireCheck()
  {
	if (!(level.time % 2)) A_OxidationFlame();
  }
  
  action void DCY_OxiCheck(int l)
  {
	switch (invoker.overheat)
	{
		case 0: invoker.interfacecol = "DCY_OxiFire1"; invoker.interfacecol2 = "d13330"; break;
		case 20: invoker.interfacecol = "DCY_OxiFire2"; invoker.interfacecol2 = "d15e30"; break;
		case 40: invoker.interfacecol = "DCY_OxiFire3"; invoker.interfacecol2 = "d47528"; break;
		case 60: invoker.interfacecol = "DCY_OxiFire4"; invoker.interfacecol2 = "e6a12c"; break;
		case 80: invoker.interfacecol = "DCY_OxiFire5"; invoker.interfacecol2 = "ffd761"; break;
		case 100: invoker.interfacecol = "DCY_OxiFire6"; invoker.interfacecol2 = "ababab"; break;
		case 120: invoker.interfacecol = "DCY_OxiFire7"; invoker.interfacecol2 = "b1d3de"; break;
		case 140: invoker.interfacecol = "DCY_OxiFire8"; invoker.interfacecol2 = "6dd1fc"; break;
		case 160: invoker.interfacecol = "DCY_OxiFire9"; invoker.interfacecol2 = "388eff"; break;
		case 180: invoker.interfacecol = "DCY_OxiFire10"; invoker.interfacecol2 = "1938ff"; break;
	}
	
	A_OverlayTranslation(l, invoker.interfacecol);
  }
  
  action void DCY_Oxi()
  {
	if (player == null) return;
	
	Weapon weap = player.ReadyWeapon;
	if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
	{
		if (!weap.DepleteAmmo (weap.bAltFire, true, 1)) return;
		A_Overlay(-1, "OverlayMuzzle");
		A_OverlayOffset(-1, 160, 100);
		A_OverlayFlags(-1, PSPF_RENDERSTYLE, true);
		A_OverlayPivotAlign(-1, PSPA_CENTER, PSPA_CENTER);
		A_OverlayScale(-1, randompick(-1, 1), randompick(-1, 1));
		A_OverlayRenderStyle(-1, STYLE_ADD);
		DCY_OxiCheck(-1);
	}
	
	A_GunFlash();
	A_WeaponOffset(frandom(-0.75, 0.75), frandom(-0.75, 0.75), WOF_ADD|WOF_INTERPOLATE);
	DCY_FlameThrowerBase flame = DCY_FlameThrowerBase(SpawnPlayerMissile("DCY_FlameThrowerBase"));
	if (flame)
	{
		flame.SetShade(invoker.interfacecol2);
		flame.SetDamage((3 + int(ceil(invoker.overheat / 35))));
	}
  }
  
  override void Tick()
  {
	super.Tick();
	if (overheat > 0 && !(level.time % random(3, 4))) overheat--;
  }
  
  States
  {
  Spawn:
	F8L_ Z -1;
	Stop;
  OverlayIdle:
	F8L_ A 1 DCY_OxiCheck(15);
	Stop;
  OverlayFire:
	F8L_ A 1
	{
		invoker.lower += 7;
		A_WeaponOffset(0, 32 + (invoker.lower / 3), WOF_INTERPOLATE);
		DCY_OxiCheck(15);
	}
	F8L_ AAAAAAA 1
	{
		if (invoker.lower > 0.01) invoker.lower *= 0.65; else invoker.lower = 0;
		A_WeaponOffset(0 - (invoker.lower / 5), 32 + (invoker.lower / 3), WOF_INTERPOLATE);
		DCY_OxiCheck(15);
	}
	Stop;
   OverlayTrail:
	F9L_ AABBCCDDEFGHI 1 Bright
	{
		int lay = clamp(OverlayID() - 170, 0, OXI_TRAIL);
		A_OverlayOffset(OverlayID(), -(invoker.w_pa[lay] - angle) - frandom(-1, 1), (invoker.w_pp[lay] - pitch) - random(1, 2), WOF_ADD);
		invoker.w_pa[lay] = angle;
		invoker.w_pp[lay] = pitch;
	}
	Stop;
  OverlayMuzzle:
	F9L_ CEG 1 Bright DCY_HandleScale(OverlayID());
	Stop;
  OverlayIntPower:
	TNT1 A 10 Bright
	{
		let s = player.FindPSprite(OverlayID());
		if (s) s.alpha = 0.01;
	}
	TNT1 A 1 A_StartSound("Oxidation/Powerup", 10, volume: 0.35);
	F8L_ BBBBBBBBBBBB 1 Bright
	{
		let s = player.FindPSprite(OverlayID());
		if (s) { A_OverlayAlpha(OverlayID(), s.alpha + 0.1); }
	}
  OverlayInterface:
	F8L_ B 1 Bright;
	Loop;
  OverlayIntShut:
	F8L_ B 1 Bright
	{
		let s = player.FindPSprite(OverlayID());
		if (s)
		{
			if (s.alpha <= 0) return ResolveState("OverlayNull");
			else A_OverlayAlpha(OverlayID(), s.alpha - 0.05);
		}
		
		return ResolveState("Null");
	}
	Loop;
  Feel:
	TNT1 A 1 A_ZoomFactor(0.975);
	TNT1 A 1 A_ZoomFactor(0.9775);
	TNT1 A 1 A_ZoomFactor(0.9825);
	TNT1 A 1 A_ZoomFactor(0.9926);
	TNT1 A 1 A_ZoomFactor(0.995);
	TNT1 A 1 A_ZoomFactor(0.997);
	TNT1 A 1 A_ZoomFactor(1);
	Stop;
  Select:
	TNT1 A 0
	{
		A_StopSound(24);
		invoker.offsx = 50;
		invoker.offsy = 150;
		A_WeaponOffset(0, 32, WOF_INTERPOLATE);
		A_OverlayPivotAlign(5, PSPA_CENTER, PSPA_CENTER);
		A_Overlay(15, "OverlayIntPower");
		A_OverlayOffset(15, 160, 100);
		A_OverlayFlags(15, PSPF_ALPHA|PSPF_RENDERSTYLE, true);
		A_OverlayRenderStyle(15, STYLE_TRANSLUCENT);
	}
	TNT1 A 1
	{
		A_Overlay(5, "OverlayIdle");
		//A_OxiFireCheck();
		DCY_Raise(0.4);
		A_OverlayPivotAlign(5, PSPA_CENTER, PSPA_CENTER);
		return (invoker.offsx <= 0.1 || invoker.offsy <= 0.1) ? ResolveState("Ready") : ResolveState(null);
	}
	Goto Select+1;
  Deselect:
	TNT1 A 0
	{
		A_StopSound(CHAN_6);
		invoker.offsx = invoker.saveoffsx + 1;
		invoker.offsy = invoker.saveoffsy + 2;
		A_Overlay(15, "OverlayIntShut");
		A_OverlayFlags(15, PSPF_ALPHA|PSPF_RENDERSTYLE, true);
		A_OverlayRenderStyle(15, STYLE_TRANSLUCENT);
	}
	TNT1 A 1
	{
		A_Overlay(5, "OverlayIdle");
		DCY_Lower(1.75, 1.2);
		
		return (invoker.offsx >= 150 || invoker.offsy >= 150) ? ResolveState("DeselectLoop") : ResolveState(null);
	}
	Goto Deselect+1;
  Ready:
	TNT1 A 1
	{
		invoker.lower = 0;
		A_Overlay(5, "OverlayIdle");
		A_WeaponReady();
		A_OverlayOffset(5, 0, 0, WOF_INTERPOLATE);
		A_OxiFireCheck();
		A_StartSound("Oxidation/Loop", CHAN_6, CHANF_LOOPING);
	}
	Loop;
  Fire:
  NormalFire:
	Goto Ready;
  Fire:
  NormalFire:
	TNT1 A 5
	{
		A_Overlay(5, "OverlayFire");
		A_StartSound("Oxidation/Fire", CHAN_WEAPON);
	}
	TNT1 A 0 A_StartSound("Oxidation/FireLoop", CHAN_6, CHANF_LOOPING);
	Goto NormalLoop;
  NormalLoop:
	TNT1 A 2
	{
		A_Overlay(10, "Feel");
		A_Overlay(5, "OverlayFire");
		DCY_Oxi();
		A_OxidationFlame();
	}
	TNT1 A 1
	{
		invoker.overheat++;
		invoker.lower = 0;
		A_Refire("NormalLoop");
	}
	Goto Stahp;
  Stahp:
	TNT1 A 1
	{
		A_StartSound("Oxidation/Stop", CHAN_WEAPON);
		A_StartSound("Oxidation/Loop", CHAN_6, CHANF_LOOPING);
	}
	Goto Ready;
  }
}