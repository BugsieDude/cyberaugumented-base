Class DCY_SilverBlaster : DCY_Weapon
{
  Default
  {
	Tag "ZYRC-D Theta Silver Blaster";
	Inventory.PickupMessage "You got the ZYRC-D Theta Silver Blaster! Turns shells into superheated plasma bolts with its technology.";
	Obituary "$o was blown away into some meters by $k's Silver Blaster.";
	Weapon.AmmoType "DCY_Shell";
	Weapon.AmmoGive 15;
	Weapon.AmmoUse 1;
	Weapon.SlotNumber 3;
	Decal "BulletChip";
	+FLOORCLIP;
	+DONTGIB;
	Scale 0.7;
	Weapon.Kickback 65;
	Inventory.PickupSound "Underline/Pickup";
  }
  
  int overheat;
  
  action void A_UnderlineFire()
  {
    A_StartSound("Underline/Fire", CHAN_WEAPON, volume: 0.45);
	A_StartSound("Underline/Plasma", 15, pitch: frandom(1.3, 1.5));
    invoker.DepleteAmmo(invoker.bAltFire, true);
    A_GunFlash();
	
	FLineTraceData d;
	
	for (int i = 7; i > 0; i--)
	{
		double la = angle + frandom(-5, 5);
		double lp = pitch + frandom(-3, 3);
		
		A_FireBullets(5, 3, 1, 0, "DCY_Null2", 0);
		LineTrace(la, 8192, lp, TRF_NOSKY, height / 2, 0, 0, d);
		let h = d.HitActor;
		
		if (d.HitType == TRACE_HitWall || d.HitType == TRACE_HitActor || d.HitType == TRACE_HitCeiling || d.HitType == TRACE_HitFloor)
		{
			actor x = Actor(Spawn("DCY_BlasterHit"));
			
			if (!x) return;
			x.SetOrigin(d.HitLocation, false);
			x.A_Face(invoker.owner);
			
			if (h && h.bSHOOTABLE && h.Health > 0)
				h.DamageMobj(self, invoker.owner, 7, "Plasma", DMG_PLAYERATTACK);
		}
		
		for (int i = 0; i < d.distance - 10; i += 10)
		{
			actor y = Actor(Spawn("DCY_BlasterTrail", Level.Vec3Offset(d.HitLocation, d.HitDir * -i)));
			y.A_Face(invoker.owner);
		}
	}
	
    A_WeaponOffset(frandom(-2.0, 2.0), frandom(-2.0, 2.0), WOF_ADD|WOF_INTERPOLATE);
  }
  
  States
  {
  Spawn:
	SIL_ Z -1;
	Stop;
  OverlayIdle:
	SIL_ A 1;
	Stop;
  OverlayFire:
	SIL_ AAA 1
	{
		invoker.lower += 0.5;
		A_WeaponOffset(0 - (invoker.lower / 10), 32 + invoker.lower, WOF_INTERPOLATE);
		DCY_HandleScale(5);
	}
	Stop;
  OverlayReadyFire:
	SIL_ B 1
	{
		invoker.lower += 7;
		A_WeaponOffset(0 - (invoker.lower / 10), 32 + invoker.lower, WOF_INTERPOLATE);
		DCY_HandleScale(5);
	}
	SIL_ BBBBBCCCCCCCCCCCCCCCCC 1
	{
		if (invoker.lower > 0.01) invoker.lower *= 0.5; else invoker.lower = 0;
		A_WeaponOffset(0 - (invoker.lower / 10), 32 + invoker.lower, WOF_INTERPOLATE);
		DCY_HandleScale(5);
	}
	Stop;
  OverlayMuzzle:
	MUZ_ BB 1 Bright
	{
		invoker.t += 0.1;
		A_OverlayRotate(-1, frandom(0, 360));
		A_OverlayScale(-1, invoker.t, invoker.t);
	}
	Stop;
  Feel:
	TNT1 A 1 A_ZoomFactor(0.9);
	TNT1 A 1 A_ZoomFactor(0.9675);
	TNT1 A 1 A_ZoomFactor(0.9825);
	TNT1 A 1 A_ZoomFactor(0.9926);
	TNT1 A 1 A_ZoomFactor(0.995);
	TNT1 A 1 A_ZoomFactor(0.997);
	TNT1 A 1 A_ZoomFactor(1);
	Stop;
  Select:
	TNT1 A 0
	{
		invoker.offsx = -150;
		invoker.offsy = 150;
		A_WeaponOffset(0, 32, WOF_INTERPOLATE);
		A_OverlayPivotAlign(5, PSPA_CENTER, PSPA_CENTER);
		A_OverlayRotate(5, -(invoker.offsy / 3.5), WOF_INTERPOLATE);
	}
	TNT1 A 1
	{
		A_Overlay(5, "OverlayIdle");
		DCY_Raise(0.4);
		A_OverlayPivotAlign(5, PSPA_CENTER, PSPA_CENTER);
		A_OverlayRotate(5, -(invoker.offsy / 3.5), WOF_INTERPOLATE);
		return (invoker.offsx >= -0.1 || invoker.offsy <= 0.1) ? ResolveState("Ready") : ResolveState(null);
	}
	Goto Select+1;
  Deselect:
	TNT1 A 0
	{
		invoker.offsx = invoker.saveoffsx - 2;
		invoker.offsy = invoker.saveoffsy + 2;
	}
	TNT1 A 1
	{
		A_Overlay(5, "OverlayIdle");
		DCY_Lower(1.75, 1.05);
		
		return (invoker.offsx <= -150 || invoker.offsy >= 150) ? ResolveState("DeselectLoop") : ResolveState(null);
	}
	Goto Deselect+1;
  Ready:
	TNT1 A 1
	{
		invoker.lower = 0;
		A_Overlay(5, "OverlayIdle");
		A_WeaponReady();
		A_OverlayOffset(5, 0, 0, WOF_INTERPOLATE);
	}
	Loop;
  Fire:
  NormalFire:
	TNT1 A 3 A_Overlay(5, "OverlayFire");
	Goto FireLoop;
  FireLoop:
	TNT1 A 7
	{
		A_Overlay(10, "Feel");
		DCY_Muzzle(0.65);
		A_Overlay(5, "OverlayReadyFire");
		A_UnderlineFire();
	}
	TNT1 A 1
	{
		A_Refire();
	}
	Goto Ready;
  }
}

Class DCY_BlasterHit : Actor
{
  override void PostBeginPlay()
  {
	A_SpawnParticleEx(0xffffff, TexMan.CheckForTexture("MUZ_B0"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE|SPF_ROLL, 3, random(40, 80), 0, 5, fadestepf: 0, startroll: frandom(0, 360), rollvel: frandom(100, 400) * randompick(-1, 1));
	A_SpawnParticleEx(0x5496ff, TexMan.CheckForTexture("graphics/Particles/dcyglowp.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE, 100, 30, 0, 5, fadestepf: 0.2, sizestep: -4.5);
	A_SpawnParticleEx(0x72f3fc, TexMan.CheckForTexture("graphics/Particles/dcyglowp.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE, 100, 20, 0, 5, fadestepf: 0.2, sizestep: -3.5);
	A_SpawnParticleEx(0x0e3152, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE|SPF_ROLL, 100, random(40, 60), 0, 5, velx: frandom(-0.5, 0.5), vely: frandom(-0.5, 0.5), velz: frandom(-0.5, 0.5), fadestepf: 0.05, sizestep: 0.725, startroll: frandom(0, 360));
	Destroy();
  }
}

Class DCY_BlasterTrail : Actor
{
  override void PostBeginPlay()
  {
	A_SpawnParticleEx(0x72f3fc, TexMan.CheckForTexture("graphics/Particles/dcyglowp.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE, 5, random(20, 25), 0, fadestepf: 0.2, sizestep: -3.5);
	A_SpawnParticleEx(0x0e3152, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_NOTIMEFREEZE|SPF_RELATIVE|SPF_ROLL, 50, random(5, 15), 0, velx: frandom(-0.5, 0.5), vely: frandom(-0.5, 0.5), velz: frandom(-0.5, 0.5), fadestepf: 0.15, sizestep: 0.25, startroll: frandom(0, 360));
	Destroy();
  }
}