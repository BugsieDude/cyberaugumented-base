Class CyberaugumentedProtagonist : PlayerPawn
{
  double ByteAngle, Angle;
  int DashCooldown, JumpCooldown;
  double djump2rnd;
  double dashpower;
  double dashpowerup;
  bool intheair;
  bool jumpbutton;
  int jumptics;
  float secrettics;
  int playwatersound;
  bool submerged;
  bool falling;
  double wna;
  playerinfo CAPlayer;
	
  override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
  {
    int dmg = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	
	//Sound is based off the amount of damage the player takes
    if (dmg > 60)
        painsound = "dcyprotag/painmassive";
	else if (dmg > 40)
        painsound = "dcyprotag/painhuge";
	else if (dmg > 18)
        painsound = "dcyprotag/painbig";
	else if (dmg > 12)
        painsound = "dcyprotag/pain";
    else if (dmg > 9)
        painsound = "dcyprotag/painsmall";
    else if (dmg > 5)
        painsound = "dcyprotag/paintiny";
	else
		painsound = "dcyprotag/paintiny";
	
	return dmg;
  }

  override bool OnGiveSecret(bool printmsg, bool playsound)
  {
	static const string toptext1[] =
	{
		"Secret",
		"Mystery",
		"Untold Place",
		"Unknown Area",
		"Mysterious Location",
		"Privious Location",
		"Privy",
		"Veiled Area",
		"Undisclosure"
	};
	
	static const string toptext2[] =
	{
		"found",
		"discovered",
		"observed",
		"percieved",
		"located",
		"spotted",
		"pinpointed",
		"retrieved",
		"handled",
		"unearthed",
		"excavated"
	};
	
	static const string messages[] =
	{
		"It is nothing but a mystery",
		"It is a mystery",
		"OOOYEAAAAAAAAAAH",
		"0_0",
		"Huzzah. It used to be undiscovered.",
		"You found a secret!",
		"'It's all mine!!'",
		"You observe what you have found.",
		"I suppose you're lucky.",
		"Are you going in the right direction?",
		"Anything new?",
		"Gathering info",
		"Gimme, gimme, bitch!",
		"Anything special you found?",
		"Hey, something.",
		"You ever wonder why there are places like these?",
		"These often have the kind of feel like it's... I don't know.",
		"The fuck is that.",
		"Holy shit.",
		"You're officially an explorer now.",
		"PARTYYYYYY",
		"If there's a closet I'm sad",
		"Welcome to the mystery zone",
		"Did somebody help you or me?",
		"HELL YEAH SECRET HAS COME, FUCKIN SECRET IS HERE",
		"I'm glad."
	};
	
	S_StartSound("misc/secret", 10, CHANF_UI, attenuation: ATTN_IDLE);
	
	console.printFEX(PRINT_NONOTIFY, "----------------------------------------------");
	DCY_HudMessageFade.Show(PlayerNumber(), "\c".."[".."j1".."]"..toptext1[random(0, toptext1.Size() - 1)].." "..toptext2[random(0, toptext2.Size() - 1)],
        5000, (320, 175), 50, 3, 11, 1, DCY_HudMessage.AlignCenter, fnt: "BIGFONT", screensize:(640, 360));
	DCY_HudMessageFade.Show(PlayerNumber(), messages[random(0, messages.Size() - 1)], 5001, (320, 191), 50, 3, 11, 1, DCY_HudMessage.AlignCenter, fnt: "SMALLFONT", screensize:(640, 360));
	DCY_HudMessageFade.Show(PlayerNumber(), "AAAAAAAAAAAA", 6000, (80, 1000), 50, 3, 11, 0, DCY_HudMessage.AlignCenter, fnt: "DCY_NON3", screensize:(160, 2000));
	console.printFEX(PRINT_NONOTIFY, "----------------------------------------------");
	
	return false;
  }
  
  vector2 swaying;
  transient CVar canSway;
  
  override Vector2 BobWeapon(double ticFrac)
  {
	if (!canSway) canSway = CVar.GetCVar("dcy_sway", player);
			
	Vector2 p[2];
	Weapon w = player ? player.readyWeapon : null;
	
	if (!w || w.bDONTBOB) return (0, 0);
	
	for (int i = 0; i < 2; i++)
	{
		p[i] = (0, 0);
		double a = w.bobSpeed * 128 * player.GetWBobSpeed() * (level.time - 1 + i) * 0.044;
		double b = (!i) ? prevBob : player.bob;
		
		p[i].x = (b * w.BobRangeX * ViewBob);
		p[i].y = (b * w.BobRangeY * ViewBob);
		p[i].x *= Sin(a) + cos(a / 5) / 7;
		p[i].y *= (Sin(a * 2));
		p[i] /= 12.5;
		p[i] += swaying;
	}
	
	swaying += ((player.cmd.yaw, max(0, (player.cmd.pitch * 1.25) + abs(player.mo.vel.z * 90))) * i_timescale) / 1250;
	swaying *= 0.95;
	swaying.y = clamp(swaying.y, -40, 40);
	
	return p[0] * (1. - ticfrac) + p[1] * ticfrac;
  }
  
  protected void DCY_WeaponTic()
  {
	swaying = BobWeapon(1);
  }
  
  override void Tick()
  {
	super.Tick();
	
	DCY_WeaponTic();
	
	if (waterlevel == 3)
	{
		if (playwatersound == 0 && !submerged)
		{
			A_StartSound((self.vel.z < -4.5) ? "Water/SplashDive" : "Water/Dive", 10, CHANF_OVERLAP, attenuation: ATTN_IDLE);
			playwatersound = 1;
			submerged = true;
		}
	}
	else
		playwatersound = 0;
	
	if (waterlevel < 3 && submerged)
	{
		if (playwatersound == 0)
		{
			A_StartSound("Water/Surface", 11, CHANF_OVERLAP, attenuation: ATTN_IDLE);
			playwatersound = 1;
			submerged = false;
		}
	}
  }
  
  override void HandleMovement()
  {
	super.HandleMovement();
	
	if (self.pos.z <= floorz)
	{
		intheair = false;
		jumptics = 0;
		jumpbutton = false;
	}
	
	if (self.vel.z <= 8)
	{
		if (jumptics == 7)
			jumpbutton = true;
		else
			jumptics += 1;
	}
	else
	{
		jumpbutton = false;
		jumptics = 0;
	}
	
	if (dashCoolDown > 0)
		dashCoolDown--;
	
	CyberDoubleJump();
	CyberHandleFalling();
  }
  
  void CyberHandleFalling()
  {
	if (vel.z < -45)
		falling = true;
	
	if (vel.z == 0 && falling == true)
	{
		A_QuakeEx(3, 3, 3, 30, 0, 1000, "", QF_3D|QF_SCALEDOWN);
		falling = false;
		A_StopSound(CHAN_BODY);
		A_StopSound(CHAN_VOICE);
		A_StartSound("dcyprotag/crash", CHAN_BODY);
	}
  }
  
  transient CVar allowDashSound, dashSound; // Must be transient to prevent breaking save games
  
  void CyberDash()
  {
	let CAPlayer = self.player;
	Let Cmd = CAPlayer.Cmd.Buttons;
	
    // Dead, client-side predicting, or on cool down
    if (!player || waterlevel >= 3 || player.health <= 0 || !sv_allowdash || (player.cheats & CF_PREDICTING) || dashCoolDown > 0)
        return;
    
	// Get the player's movement inputs
	Vector2 moveDirection = (player.cmd.forwardmove, -player.cmd.sidemove);
	
	if (player.cmd.forwardmove || player.cmd.sidemove)
	{
		if (moveDirection ~== (0,0)) // If no input, simply dash in the facing direction
			moveDirection = AngleToVector(player.mo.angle);
		else
			moveDirection = RotateVector(moveDirection.Unit(), player.mo.angle); // Unit() so that it can be scaled correctly
		
		// It's recommended to cache client-side CVars for faster access
		if (!allowDashSound)
			allowDashSound = CVar.GetCVar("cl_allowdashsound", player);
		
		if (allowDashSound.GetBool())
		{
			if (!dashSound)
				dashSound = CVar.GetCVar("cl_dashsoundtype", player);
				
			if (dashSound.GetInt() == 2) A_StartSound("DJUMP2C", 70);
			else if (dashSound.GetInt() == 1) A_StartSound("DASH2", 70);
			else if (dashSound.GetInt() == 0) A_StartSound("DASH1", 70);
		}
	
		dashCoolDown = sv_dashcooldown;
		
		if (!Player.onGround)
		{
			vel.z *= 0.25;
			vel += ((moveDirection * sv_dashpower) / 1.75, sv_dashpowerup); // Server CVars can be accessed directly in ZScript
		}
		else
			vel = ((moveDirection * sv_dashpower) * 1.5, 0);
	}
  }
  
  transient CVar allowDJumpSound, dJumpSound;
  
  void CyberDoubleJump()
  {
	let CAPlayer = self.player;
	Let Cmd = CAPlayer.Cmd.Buttons;
	
	//Null-Check. In case the caller isn't a Player
	if (!player || waterlevel >= 2 || player.health <= 0 || (player.cheats & CF_PREDICTING) || Player.onGround || intheair || !level.IsJumpingAllowed() || sv_nojump || !sv_allowdoublejump || waterlevel >= 2)
		return;
	
	if (self.vel.z <= 8 && (cmd & BT_JUMP) && jumpbutton)
	{
		if (!allowDJumpSound)
		allowDJumpSound = CVar.GetCVar("cl_allowdjumpsound", player);
		
		if (allowDJumpSound.GetBool())
		{
			if (!dJumpSound)
				dJumpSound = CVar.GetCVar("cl_djumpsoundtype", player);
				
			if (dJumpSound.GetInt()) A_StartSound("DJUMP2", 80);
			else A_StartSound("DJUMP1", 80);
		}
			
		vel.z = 8.5;
		jumpbutton = false;
		intheair = true;
	}
  }
  
  Default
  {
  DamageFactor "Player", 0.00;
  DamageFactor "PlayerStun", 0.00;
  DamageFactor "Neonic", 0.00;
  DamageFactor "Ballista", 0.00;
  DamageFactor "Marines", 0.00;
  Player.StartItem "DCY_Clip", 50;
  Player.StartItem "DCY_BurstPistol";
  Player.Startitem "DCY_IonizedArc";
  Player.WeaponSlot 1, "DCY_IonizedArc";
  Player.WeaponSlot 2, "DCY_BurstPistol";
  Player.WeaponSlot 3, "DCY_PumpActionShotgun", "DCY_SilverBlaster", "DCY_DoubleBarrel";
  Player.WeaponSlot 4, "DCY_Dispatchbringer", "DCY_Nightfall";
  Player.WeaponSlot 5, "DCY_Legionnaire", "DCY_Intervention";
  Player.WeaponSlot 6, "DCY_EnergyExtravasation", "DCY_MesonDischarge";
  Player.WeaponSlot 7, "DCY_PhotonCrux", "DCY_Liquidation";
  Player.WeaponSlot 8, "DCY_Endogravity", "DCY_Oxidation", "DCY_Ordnance";
  PainSound "dcyprotag/pain";
  TeleFogSourceType "DCY_PlayerSourceTeleport";
  TeleFogDestType "DCY_PlayerTeleport";
  Player.AirCapacity 0; //Because lore-wise its body regulates overflowing?
  Player.DisplayName "CXII";
  //Player.CrouchSprite "PLYC";
  Speed 1;
  Health 100;
  Radius 16;
  Height 56;
  Mass 100;
  PainChance 255;
  
  Player.ColorRange 112, 127;
  Player.Colorset 0, "$TXT_COLOR_GREEN",		0x70, 0x7F,  0x72;
  Player.Colorset 1, "$TXT_COLOR_GRAY",		0x60, 0x6F,  0x62;
  Player.Colorset 2, "$TXT_COLOR_BROWN",		0x40, 0x4F,  0x42;
  Player.Colorset 3, "$TXT_COLOR_RED",		0x20, 0x2F,  0x22;
  Player.Colorset 4, "$TXT_COLOR_LIGHTGRAY",	0x58, 0x67,  0x5A;
  Player.Colorset 5, "$TXT_COLOR_LIGHTBROWN",	0x38, 0x47,  0x3A;
  Player.Colorset 6, "$TXT_COLOR_LIGHTRED",	0xB0, 0xBF,  0xB2;
  Player.Colorset 7, "$TXT_COLOR_LIGHTBLUE",	0xC0, 0xCF,  0xC2;
  }
  
  States
  {
  Spawn:
    _101 H random(60, 200);
	_101 I random(5, 10);
	_101 I 0 A_Jump(100, "TurnAround");
    Loop;
  TurnAround:
	_101 J 30;
	_101 I random(5, 8);
	_101 K 30;
	Goto Spawn;
  See:
    _101 ABCD 4;
    Goto Spawn;
  Missile:
    _101 E 12;
    Goto Spawn;
  Melee:
    _101 F 6 BRIGHT;
    Goto Missile;
  Pain:
    _101 G 4;
    _101 G 4 A_StartSound(painsound, CHAN_BODY);
    Goto Spawn;
  Death:
    _101 H 0 A_PlayerSkinCheck("AltSkinDeath");
  Death1:
    _10D A 5;
    _10D B 5 A_PlayerScream;
    _10D C 5 A_NoBlocking;
    _10D DEFGHI 4;
    _10D J -1;
    Stop;
  XDeath:
    _101 O 0 A_PlayerSkinCheck("AltSkinXDeath");
  XDeath1:
    _10D A 5;
    _10D B 5 A_XScream;
    _10D C 5 A_NoBlocking;
    _10D DEFGHI 4;
    _10D J -1;
    Stop;
  AltSkinDeath:
	_10D A 5;
    _10D B 5 A_PlayerScream;
    _10D C 5 A_NoBlocking;
    _10D DEFGHI 4;
    _10D J -1;
    Stop;
  AltSkinXDeath:
    _10D A 5;
    _10D B 5 A_PlayerScream;
    _10D C 5 A_NoBlocking;
    _10D DEFGHI 4;
    _10D J -1;
    Stop;
  }
}