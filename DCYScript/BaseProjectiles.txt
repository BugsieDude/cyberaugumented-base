//Bases
Mixin Class DCY_PFX
{
  int sfxdistance;
  
  override void PostBeginPlay()
  {
	super.PostBeginPlay();
	sfxdistance = 1500;
  }
  
  Default
  {
  Projectile;
  +FORCEXYBILLBOARD
  }
  
  action void A_SpawnFlames(string fcolor = "ffffff", float ftimer = 20, float fsize = 40, float faccel = 0,
							bool smonk = true, float offsets = 1, bool allsmoke = false, double thrust = 0, bool ember = true)
  {
	A_SpawnParticleEx(fcolor, TexMan.CheckForTexture("graphics/Particles/dcyflame.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, ftimer, fsize / 1.1, angle,
	frandom(-offsets, offsets), frandom(-offsets, offsets), frandom(-offsets, offsets),
	frandom(-0.1, 0.1) + ((thrust == 0) ? 0 : (Vel.x / thrust)), frandom(-0.1, 0.1) + ((thrust == 0) ? 0 : (Vel.y / thrust)), frandom(-0.1, 0.1) + ((thrust == 0) ? 0 : (Vel.z / thrust)),
	accelz: faccel, startalphaf: 1.0, fadestepf: -(fsize / 10) / (ftimer / 10), sizestep: (-(fsize / 10) / (ftimer / 10)) / 6, startroll: frandom(0, 360), rollvel: frandom(-10, 10));
	
	if ((ember) && ((level.time % random(3, 9)) == 0)) A_SpawnParticleEx(fcolor, TexMan.CheckForTexture("graphics/particles/dcysquarep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE, 40, random(3, 6), angle, frandom(-1, 1), frandom(-1, 1), frandom(-1, 1), frandom(-0.1, 0.1), frandom(-0.1, 0.1), frandom(-0.1, 0.1), frandom(-0.1, 0.1), frandom(-0.1, 0.1), frandom(-0.05, 0.2), fadestepf: 0, sizestep: -0.115);	
	if (smonk)
	{
		if (allsmoke) A_SpawnParticleEx(0x000000, TexMan.CheckForTexture("graphics/Particles/dcygas.png"), STYLE_TRANSLUCENT, SPF_RELATIVE|SPF_ROLL, ftimer * 1.5, fsize, angle, frandom(-1, 1) - 2, frandom(-1, 1), frandom(-1, 1), frandom(-0.1, 0.1) + ((thrust == 0) ? 0 : (Vel.x / thrust)), frandom(-0.1, 0.1) + ((thrust == 0) ? 0 : (Vel.y / thrust)), frandom(-0.1, 0.1) + ((thrust == 0) ? 0 : (Vel.z / thrust)), startalphaf: 0.3, sizestep: 0.1, startroll: frandom(0, 360), rollvel: random(0, 1) ? 0.1 : -0.1);
		else
		{
			if ((level.time % random(2, 7)) == 0)
				A_SpawnParticleEx(0x000000, TexMan.CheckForTexture("graphics/Particles/dcygas.png"), STYLE_TRANSLUCENT, SPF_RELATIVE|SPF_ROLL, ftimer * 1.5, fsize, angle, frandom(-1, 1) - 2, frandom(-1, 1), frandom(-1, 1), frandom(-0.1, 0.1) + ((thrust == 0) ? 0 : (Vel.x / thrust)), frandom(-0.1, 0.1) + ((thrust == 0) ? 0 : (Vel.y / thrust)), frandom(-0.1, 0.1) + ((thrust == 0) ? 0 : (Vel.z / thrust)), startalphaf: 0.3, fadestepf: 0.01, sizestep: 0.1, startroll: frandom(0, 360), rollvel: random(0, 1) ? 0.1 : -0.1);
		}
	}
  }
}

Class DCY_PProjectile : Actor abstract
{
  Mixin DCY_FX;
  Mixin DCY_PFX;
}

Class DCY_PFastProjectile : FastProjectile abstract
{
  Mixin DCY_FX;
  Mixin DCY_PFX;
  
  bool checkscalex;
  bool checkscaley;
  bool checkvelocity;
  bool checkroll;
  bool checktranslation;
  bool checkframe;
  bool checkpitch;
  property CSX : checkscalex;
  property CSY : checkscaley;
  property CV : checkvelocity;
  property CR : checkroll;
  property CT : checktranslation;
  property CF : checkframe;
  property CA : checkpitch;
  
  Default
  {
    DCY_PFastProjectile.CSX false;
	DCY_PFastProjectile.CSY false;
	DCY_PFastProjectile.CV false;
	DCY_PFastProjectile.CR false;
	DCY_PFastProjectile.CT false;
	DCY_PFastProjectile.CF false;
	DCY_PFastProjectile.CA false;
	MissileHeight 6;
  }
  
  override void Effect()
  {
	if (!DCY_EffectDistance(sfxdistance)) return;
	
	class<Actor> trail = MissileName;
	if (trail != null)
	{
		double hitz = pos.z - 8;
		
		if (hitz < floorz)
			hitz = floorz;
			
		// Do not clip this offset to the floor.
		hitz += MissileHeight;
		
		Actor act = Spawn (trail, (pos.xy, hitz), ALLOW_REPLACE);
		if (act != null)
		{
			if (bGetOwner && target != null)
				act.target = target;
			else
				act.target = self;
				
			act.angle = angle;
			act.pitch = pitch;
			if (checkroll == true) { act.roll = roll; }
			if (checkscalex == true) { act.scale.x = scale.x; }
			if (checkscaley == true) { act.scale.y = scale.y; }
			if (checkvelocity == true) { act.vel = vel; }
			if (checktranslation == true) { act.translation = translation; }
			if (checkframe == true) { act.frame = frame; act.sprite = sprite; }
			if (checkpitch == true) { act.pitch = pitch; }
		}
	}
  }
}

//Small FX
Class DCY_PArc : Actor
{
  Default
  {
  Scale 0.5;
  Alpha 1.0;
  RenderStyle "Add";
  +DONTSPLASH
  -SOLID
  +NOINTERACTION
  +ROLLSPRITE
  +FLATSPRITE
  +BRIGHT
  }
  
  override void PostBeginPlay()
  {
	super.PostBeginPlay();
	scale.x *= randompick(-1, 1);
	roll = frandom(0, 360);
	angle = frandom(0, 360);
	pitch = frandom(0, 360);
  }
  
  States
  {
  Spawn:
	L1G5 AAAAA 1 A_SetScale(Scale.X + 0.1);
	Stop;
  }
}

Class DCY_BaseTrail : Actor
{
  Default
  {
  RenderStyle "Add";
  +BRIGHT
  +NOCLIP
  +ROLLSPRITE
  +NOINTERACTION
  +DONTSPLASH
  Scale 1.0;
  Alpha 0.765;
  Radius 0;
  Height 0;
  }
  
  States
  {
  Spawn:
	"####" "#" 1
	{
		if (Alpha < 0)
			Destroy();
		A_FadeOut(0.1, 0);
	}
	Loop;
  }
}

Class DCY_BaseTrail2 : DCY_BaseTrail
{
  Default { Alpha 0.1; }
  
  States
  {
  Spawn:
	"####" "#" 1
	{
		if (Alpha < 0)
			Destroy();
		A_FadeOut(0.0075, 0);
	}
	Loop;
  }
}

//Tracers
Class DCY_TracerPlayer : DCY_PFastProjectile
{
  sound whiz;
  property WhizSound : whiz;
  bool explosive;
  property IsExplosive : explosive;
  string spark;
  property SparkFX : spark;
  
  Default
  {
  +RANDOMIZE;
  +FORCEXYBILLBOARD;
  +NOEXTREMEDEATH;
  +NOTIMEFREEZE
  +BLOODSPLATTER;
  +THRUGHOST;
  +NOSPLASHALERT;
  -DONTSPLASH;
  +MISSILE;
  +BRIGHT;
  DCY_TracerPlayer.WhizSound "Rec";
  DCY_TracerPlayer.IsExplosive false;
  DCY_TracerPlayer.SparkFX "DCY_Spark";
  DamageFunction 0;
  Radius 2;
  Height 2;
  Speed 300;
  Mass 2;
  RenderStyle "Add";
  Decal "BulletChip";
  DamageType "Player";
  Scale .08;
  Alpha 0.9;
  }
  
  double sa, sp;
  
  void A_CheckWhiz()
  {
	if (!CheckRange(128))
	{
		let curCamera = players [consolePlayer].camera;
		if(CheckIfCloser(curCamera,128)) A_StartSound(whiz, 20, CHANF_DEFAULT|CHANF_OVERLAP, attenuation: 0.65);
	}
  }
  
  void A_Sparks(class<Actor> sparktype = "DCY_Spark")
  {
	for (int i = 3; i > 0; i--)
	{
		actor spark = Actor(Spawn(sparktype, pos));
		if (spark)
		{
			spark.angle = frandom(0, 360);
			spark.vel = (frandom(-7, 7), frandom(-7, 7), frandom(-7, 10));
			spark.A_FaceMovementDirection();
		}
	}
  }
  
  override void PostBeginPlay()
  {
	super.PostBeginPlay();
	sa = angle;
	sp = pitch;
  }
  
  States
  {
  Spawn:
    TRAC A 1 A_CheckWhiz();
    Loop;
  Death:
	TNT1 A 1
	{
		A_StartSound("DCYBullet/Hit", CHAN_BODY, volume: 0.5);
		A_SpawnItemEx("DCY_PuffGlow", flags: SXF_NOCHECKPOSITION);
		A_SpawnParticleEx(0xaaaaaa, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE, random(20, 45), 30, 0, velx: frandom(-0.5, 0.5), vely: frandom(-0.5, 0.5), velz: frandom(-0.5, 0.5), fadestepf: 0.05, sizestep: 0.725);
		A_Sparks();
	}
    Stop;
  XDeath:
    TNT1 A 0 { if (explosive) SetStateLabel("Death"); }
    Stop;
  }
}

Class DCY_Spark : Actor
{
  Default
  {
  Radius 1;
  Height 1;
  Alpha 1.0;
  Scale 0.1;
  Gravity 0.485;
  Speed 15;
  +BRIGHT;
  +MISSILE;
  +FORCEXYBILLBOARD;
  +DONTSPLASH;
  +THRUACTORS;
  +NOBLOCKMONST;
  +CANNOTPUSH;
  +NOTRIGGER;
  BounceFactor 0.5;
  BounceType "DOOM";
  RenderStyle "Add";
  }
  
  override void PostBeginPlay()
  {
	super.PostBeginPlay();
	A_ScaleVelocity(0.6, AAPTR_DEFAULT);
	If(!random(0, 1)) A_SetScale(Scale.X*2);
	A_SetScale(Scale.X*frandom(0.75, 1.115));
  }
  
  States
  {
  Spawn:
	NULL A 4;
	NULL A 1
	{
		If(Scale.X <= 0)
			Destroy();

		A_ScaleVelocity(0.965);
		A_SetScale(Scale.X-0.01);
		A_FadeOut(0.001, 0);
	}
	Goto Spawn+1;
  Death:
	TNT1 A 1;
	Stop;
  }
}

Class DCY_PuffGlow : Actor
{
  Default
  {
  Radius 0;
  Height 0;
  RenderStyle "Add";
  +NOCLIP;
  +THRUACTORS;
  +ROLLSPRITE;
  +NOGRAVITY;
  +BRIGHT;
  Alpha 1.0;
  Scale 0.05;
  }
  
  override void PostBeginPlay()
  {
	super.PostBeginPlay();
	
	A_SetScale(Scale.X+frandom(0.1, 0.035), Scale.Y+frandom(0.1, 0.035));
	alpha = frandom(0.7, 0.9);
	roll = frandom(0, 360);
  }
  
  States
  {
  Spawn:
	MUZ_ A 1 NoDelay;
	MUZ_ A 1
	{
		If(Alpha <= 0 || Scale.X <= 0)
			Destroy();
			
		A_FadeOut(0.3, 0);
		A_SetScale(Scale.X-Pitch, Scale.Y-Pitch);
		A_SetPitch(Pitch+0.05, SPF_INTERPOLATE);
	}
	Goto Spawn+1;
  }
}

Class DCY_Null : Actor { override void PostBeginPlay() { Destroy(); } }
Class DCY_Null2 : DCY_Null { Default { +NODECAL } }

//Projectiles
Class DCY_PlayerRocket : DCY_PProjectile
{
  Default
  {
  DamageType "Explosive";
  Speed 31.7755;
  Damage 20;
  +RANDOMIZE
  +DEHEXPLOSION
  SeeSound "DCYRocket";
  DeathSound "Explod";
  Obituary "$OB_MPROCKET";
  RenderStyle "Normal";
  Scale 1.2;
  Alpha 1.0;
  -ROCKETTRAIL
  Radius 11;
  Height 8;
  }
  
  static const string ParticleColors[] = { "ffffff", "ffd77a", "ff983d", "5e5a5a" };
  
  States
  {
  Spawn:
	NMSL A 1
	{
		if (DCY_EffectDistance(sfxdistance))
		{
			A_SpawnFlames("ff3e1f", 30, 25, 0, allsmoke: true);
			if ((level.time % random(1, 9)) == 0) A_SpawnParticleEx(0xff3e1f, TexMan.CheckForTexture("graphics/particles/dcysquarep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE, 80, random(3, 9), 0, frandom(-1, 1), frandom(-1, 1), frandom(-1, 1), frandom(-0.1, 0.1), frandom(-0.1, 0.1), frandom(-0.1, 0.1), frandom(-0.2, 0.2), frandom(-0.2, 0.2), frandom(-0.2, 0.2), fadestepf: 0, sizestep: -0.075);	
			A_SpawnItemEx("DCY_RFlare", frandom(-2.5, 2.5), frandom(-2.5, 2.5), frandom(-2.5, 2.5), flags: SXF_NOCHECKPOSITION);
		}
	}
	Loop;
  Death:
	TNT1 A 0;
	TNT1 A 5
	{
		A_SetTranslucent(1.0);
		A_Explode();
		
		A_StartSound("ExplodVeryFar", 30);
		A_StartSound("ExplodFar", 20);
		
		for (int i = 3; i > 0; i--) A_SpawnItemEx("DCY_Boom", frandom(-5.0, 5.0), frandom(-5.0, 5.0), frandom(-5.0, 5.0), frandom(-0.85, 0.85), frandom(-0.85, 0.85), frandom(-0.85, 0.85), frandom(0.00, 360.0), SXF_NOCHECKPOSITION);
		A_QuakeEx(2, 2, 2, 20, 0, 200, "none", QF_SCALEDOWN, 0, 0, 0, 700);
	}
	TNT1 A 20;
	Stop;
  }
}

Class DCY_RFlare : Actor
{
  Default
  {
  Radius 0;
  Height 0;
  RenderStyle "Add";
  +NOCLIP;
  +NOINTERACTION;
  +BRIGHT;
  +CLIENTSIDEONLY;
  +ROLLSPRITE;
  Translation "0:255=%[0.00,0.00,0.00]:[1.00,0.50,0.00]";
  }
  
  States
  {
  Spawn:
	TNT1 A 3 NoDelay A_SetScale(frandompick(Scale.X, -Scale.X), Scale.Y);
	3XP0 ABCDE 2;
	Stop;
  }
}

Class DCY_PlayerGrenade : DCY_PlayerRocket
{
  Default
  {
  BounceFactor 0.3;
  WallBounceFactor 0.3;
  Gravity 0.45;
  SeeSound "";
  BounceSound "dcygrenade/bounce";
  BounceType "Doom";
  Speed 25;
  Damage 20;
  -NOGRAVITY
  +CANBOUNCEWATER;
  }
  
  static const string ParticleColors[] = { "591106", "8a2d0e", "d9601e", "f0910c" };
  
  States
  {
  Spawn:
	MNAD A 1 Bright
	{
		A_SpawnFlames("d9601e", 25, 20, 0, true, frandom(-2.5, 2.5));
		A_SpawnParticleEx(ParticleColors[random(0, ParticleColors.Size() - 1)], TexMan.CheckForTexture("Graphics/particles/dcysquarep.png"), STYLE_ADD, SPF_FULLBRIGHT, random(20, 40), random(3, 9), frandom(0, 360), frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(-0.35, 0.35), frandom(-0.35, 0.35), frandom(-0.35, 0.35), frandom(-0.2, 0.2), frandom(-0.2, 0.2), frandom(-0.2, 0.2), sizestep: -0.325);
	}
	Loop;
  Death:
	MNAD A 1 Bright;
	NBKL D 2 Bright
	{
		A_Explode();
		bNoGravity = true;
		A_SetRenderStyle(1.0, STYLE_ADD);
		A_QuakeEx(2, 2, 2, 20, 0, 450, "", QF_SCALEDOWN|QF_3D);
		A_Explode(128, 128, 1, 0, 25);
		
		A_StartSound("ExplodVeryFar", 30);
		A_StartSound("ExplodFar", 20);
	}
	NBKL E 2 Bright
	{
		for (int i = 3; i > 0; i--)
			A_SpawnItemEx("DCY_Boom", frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(-2.0, 2.0), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0, 360), SXF_NOCHECKPOSITION);
	}
	NBKL FGHIJKLM 2 Bright;
	Stop;
  }
}

Class DCY_PlayerPlasma : DCY_PFastProjectile
{
  string ac;
  property AuraColor : ac;
  
  Default
  {
  +ROLLSPRITE;
  +BRIGHT;
  +BLOODLESSIMPACT;
  +RANDOMIZE;
  +FORCEXYBILLBOARD;
  Radius 13;
  Height 8;
  Damage 5;
  DCY_PlayerPlasma.AuraColor "3437eb";
  RenderStyle "Add";
  SeeSound "";
  DeathSound "LASRX";
  Obituary "$OB_MPPLASMARIFLE";
  Translation "4:4=[255,255,255]:[255,255,255]", "0:255=%[0.00,0.00,0.12]:[0.70,0.70,2.00]";
  Scale 1;
  Alpha 1.0;
  Speed 50;
  DamageType "Plasma";
  }
  
  override void Effect()
  {
	super.Effect();
	if (DCY_EffectDistance(900)) A_SpawnParticleEx(ac, TexMan.CheckForTexture("graphics/Particles/dcyfirep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE, 5, 20, angle, velx: frandom(-0.1, 0.1) + (self.vel.x / 4), vely: frandom(-0.1, 0.1) + (self.vel.y / 4), velz: frandom(-0.1, 0.1) + (self.vel.z / 4), fadestepf: 0.45, sizestep: -4);
  }
  
  States
  {
  Spawn:
	C3AL AB 1;
	Loop;
  Death:
	PLSE A 3
	{
		A_SetScale(1.0, 1.0);
		A_SetRenderStyle(1.0, STYLE_ADD);
		A_SetRoll(frandom(0.00, 360.00));
		for (int i = 4; i > 0; i--)
			A_SpawnParticleEx(ac, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT, random(20, 40), random(10, 30), frandom(0, 360), frandom(-6.5, 6.5), frandom(-6.5, 6.5), frandom(-6.5, 6.5));
	}
	PLSE BCDE 2;
	Stop;
  }
}